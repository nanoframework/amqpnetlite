trigger:
  branches:
    include:
    - cd-nanoframework
  paths:
    exclude:
    - /*.md
    - .gitignore
  # waiting for feature to become available
  # tags:
  #   include:
  #   - v/*

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nfbot

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/amqp.2017.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- checkout: self

- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
  displayName: NuGet restore

- task: InstallnFBuildComponents@1
  displayName: Install nanoFramework MSBuild components

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: NuGetCommand@2
  inputs:
    command: 'custom' 
    arguments: 'pack nuspec\AMQPNetLite.nanoFramework.nuspec -Version 2.1.5 '
  condition: succeeded()
  displayName: Pack NuGet for AMQPNetLite

- task: NuGetCommand@2
  inputs:
    command: 'custom' 
    arguments: 'pack nuspec\AMQPNetMicro.nanoFramework.nuspec -Version 2.1.5 '
  condition: succeeded()
  displayName: Pack NuGet for AMQPNetMicro

- task: CopyFiles@1
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      **\$(nugetPackageName)*.nupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
  condition: succeeded()
  displayName: Collecting deployable artifacts

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  displayName: Publish deployables artifacts

# push NuGet packages to MyGet feed (always happens except on PR builds)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'MyGet'
  condition: succeeded()
  displayName: Push NuGet packages to MyGet
