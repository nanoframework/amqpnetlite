# no trigger config here, this is handled at Azure Pipelines interface

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nfbot
    - repository: amqpnetlite
      type: github
      endpoint: nanoframework
      name: nanoframework/amqpnetlite
      ref: nanoframework-dev

pool:
  vmImage: 'windows-2019'

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  solution: './amqpnetlite/amqp-nanoFramework.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  NF_Library: 'amqpnetlite'
  # creates a counter called versioncounter and assigns it to the minor variable
  REVISION: $[counter('versioncounter', 1)]

steps:

- checkout: self
  fetchDepth: 1
  path: s/cd
- checkout: amqpnetlite
  fetchDepth: 1
- checkout: templates
  fetchDepth: 1

- task: CopyFiles@1
  displayName: Copy NuGet.config
  inputs:
    sourceFolder: $(Build.SourcesDirectory)/cd
    Contents: NuGet.config
    TargetFolder: $(Build.SourcesDirectory)/amqpnetlite

- template: azure-pipelines-templates/install-nuget.yml@templates

- task: NuGetCommand@2
  displayName: NuGet restore
  inputs:
    restoreSolution: '$(solution)'
    feedsToUse: config
    nugetConfigPath: cd/NuGet.config

- task: InstallnFBuildComponents@1
  displayName: Install nanoFramework MSBuild components

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: Tweak NuGet package version
  inputs:
      targetType: 'inline'
      script: |
          $counter = $env:REVISION
          $version = [int]$counter

          # preview version          
          # $nugetVersion = "2.4.3-preview."
          
          # stable version
          $nugetVersion = "2.4.3."
          
          
          $nugetVersion = $nugetVersion + $version.ToString()

          Write-Host "$("##vso[task.setvariable variable=NUGET_VERSION]")$nugetVersion"
      errorActionPreference: 'stop'
      failOnStderr: 'true'

- task: NuGetCommand@2
  displayName: Pack NuGet for AMQPNetLite
  condition: succeeded()
  inputs:
    command: 'custom' 
    arguments: 'pack .\amqpnetlite\nuspec\AMQPNetLite.nanoFramework.nuspec -Version $(NUGET_VERSION) -BasePath $(Build.SourcesDirectory)\amqpnetlite'

- task: NuGetCommand@2
  displayName: Pack NuGet for AMQPNetMicro
  condition: succeeded()
  inputs:
    command: 'custom'
    arguments: 'pack .\amqpnetlite\nuspec\AMQPNetMicro.nanoFramework.nuspec -Version $(NUGET_VERSION) -BasePath $(Build.SourcesDirectory)\amqpnetlite'

- task: CopyFiles@1
  displayName: Collecting deployable artifacts
  condition: succeeded()
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      **\AMQP*.nupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

- task: DotNetCoreCLI@2
  displayName: Install SignTool tool
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], '') )
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . SignClient

- pwsh: |
    .\SignClient "Sign" `
    --baseDirectory "$(Build.ArtifactStagingDirectory)" `
    --input "**/*.nupkg" `
    --config "$(Build.Repository.LocalPath)\config\SignClient.json" `
    --filelist "$(Build.Repository.LocalPath)\config\filelist.txt" `
    --user "$(SignClientUser)" `
    --secret '$(SignClientSecret)' `
    --name "AMQPNetLite.nanoFramework" `
    --description "AMQPNetLite.nanoFramework" `
    --descriptionUrl "https://github.com/$env:Build_Repository_Name"
  displayName: Sign packages
  continueOnError: true
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], '') )

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  displayName: Publish deployables artifacts
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container

# push NuGet packages to Azure Artifacts feed (always happens except on PR builds)
- task: NuGetCommand@2
  displayName: Push NuGet packages to Azure Artifacts
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  continueOnError: true
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'AzureArtifacts-amqplite'
    allowPackageConflicts: true

# push NuGet packages to MyGet feed (always happens except on PR builds)
- task: NuGetCommand@2
  displayName: Push NuGet packages to NuGet
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  continueOnError: true
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'NuGet-amqplite'
    allowPackageConflicts: true

# step from template @ nf-tools repo
# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
